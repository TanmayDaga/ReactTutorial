{"version":3,"sources":["components/NavBar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","className","mode","navbar","href","title","type","id","aboutText","onClick","toggleMode","TextForm","useState","text","setText","noOfWords","length","split","lowercaseWords","toLowerCase","headingsContainer","heading","textarea","placeholder","rows","value","onChange","event","target","button","toUpperCase","showAlert","element","finalStr","i","charAt","navigator","clipboard","writeText","Alert","alert","role","string","lower","slice","captilize","msg","defaultProps","App","setMode","setAlert","message","setTimeout","style","light","backgroundColor","alertmsg","dark","red","yellow","green","blue","console","log","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.37801951.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types';\nexport default function NavBar(props) {\n    \n    return (\n        <div>\n            <nav className={`navbar navbar-expand-lg ${props.mode.navbar}`}>\n                <div className=\"container-fluid\">\n                    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                            <li className=\"nav-item\">\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\n                            </li>\n                            <li className=\"nav-item\">\n                                <a className=\"nav-link\" href=\"/\">{props.aboutText}</a>\n                            </li>\n\n\n                        </ul>\n                        {/* <form className=\"d-flex\">\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n                            <button className=\"btn btn-primary\" type=\"submit\">Search</button>\n                        </form> */}\n                    </div>\n                    <button type=\"button\" className=\"btn btn-success mx-2 btn-circle\" onClick = {() => {props.toggleMode(\"green\")}}></button>\n                    <button type=\"button\" className=\"btn btn-info mx-2 btn-circle\" onClick = {() => {props.toggleMode(\"blue\")}}></button>\n                    <button type=\"button\" className=\"btn btn-warning mx-2 btn-circle\" onClick = {() => {props.toggleMode(\"yellow\")}}></button>\n                    <button type=\"button\" className=\"btn btn-danger mx-2 btn-circle\" onClick = {() => {props.toggleMode(\"red\")}}></button>\n                    <button type=\"button\" className=\"btn bg-dark btn-circle mx-2\" onClick = {() => {props.toggleMode(\"dark\")}}></button>\n                    <button type=\"button\" className=\"btn btn-light btn-circle mx-2\" onClick = {() => {props.toggleMode(\"light\")}}></button>\n                    \n                </div>\n            </nav>\n        </div>\n    )\n}\n\nNavBar.propTypes = {\n    title: PropTypes.string.isRequired,\n    aboutText: PropTypes.string\n\n}\nNavBar.defaultProps = {\n    title: \"Default title\",\n    aboutText: \"Default aboutText\"\n}","import React, { useState } from 'react'\n\n\nexport default function TextForm(props) {\n    const [text, setText] = useState('');\n    const handleUpperCase = () => {\n        setText(text.toUpperCase());\n        props.showAlert(\"Converted to uppercase\",\"success\")\n\n    }\n    const handleLowerCase = () => {\n        setText(text.toLowerCase());\n        props.showAlert(\"Converted to lowercase\",\"success\")\n    }\n    \n    const handleOnChange = (event) => {\n        setText(event.target.value);// change h+h\n    }\n    const clearText =() =>{\n        setText('')\n\n        props.showAlert(\"Cleared the text\",\"success\")\n    }\n    const inverseCase =() =>{\n        var element;\n        var finalStr = \"\";\n        for (let i = 0; i < text.length; i++) {\n            element = text.charAt(i)\n            if (element === element.toLowerCase()){\n                finalStr += element.toUpperCase()\n            }\n            else{\n                finalStr += element.toLowerCase()\n            }\n            \n        }\n        setText(finalStr)\n        props.showAlert(\"Inversed the case\",\"success\")\n    }\n\n    const copyToClipboard = ()=>{\n        navigator.clipboard.writeText(text)\n        props.showAlert(\"Copied to clipboard\",\"success\")\n    }\n\n    let noOfWords = text.length===0?0:text.split(\" \").length+text.split(\"\\n\").length - 1;\n    let lowercaseWords = text.toLowerCase()\n    return (\n        <>\n        <div className = \"container\">\n            <h1 className = {props.mode.headingsContainer}>{props.heading}</h1>\n            <div className=\"mb-3\">\n                <textarea className={`form-control ${props.mode.textarea}`} id=\"myBox\" placeholder = \"Your text here\" rows=\"8\" value={text} onChange={handleOnChange}></textarea>\n            </div>\n            <button className={`btn ${props.mode.button}`} onClick={handleUpperCase}>Convert to uppercase</button>\n            <button className={`btn ${props.mode.button} mx-2`} onClick={handleLowerCase}>Convert to lowercase</button>\n            <button className={`btn ${props.mode.button} mx-2`}  onClick={clearText}>Clear Text</button>\n            <button className={`btn ${props.mode.button} mx-2`}  onClick={inverseCase}>Inverse Case</button>\n            <button className={`btn ${props.mode.button} mx-2`}  onClick={copyToClipboard}>Copy Text</button>\n\n        </div>\n        <div className={`container ${props.mode.headingsContainer}`}>\n            <h2>Your text summary</h2>\n            <p>{noOfWords} words, {text.split(\"\").length} characters</p>\n            <p>{0.008*noOfWords} minutes to read</p>\n            <h2>Preview</h2>\n            <p>{lowercaseWords.length>0?lowercaseWords:\"Please enter text to preview it\"}</p>\n        </div>\n        </>\n\n    )\n}\n","import React from 'react'\n\nexport default function Alert(props) {\n    const captilize= (string) =>{\n        const lower = string.toLowerCase();\n        return lower.charAt(0).toUpperCase()+lower.slice(1)\n    }\n    return (\n        props.alert &&  <div>\n\n\n           <div className={`alert alert-${props.alert.type}`} role=\"alert\" id=\"liveAlert\">\n            <strong>{captilize(props.alert.type)}</strong> {props.alert.msg}\n            </div>\n        </div>\n    )\n}\n","\nimport './App.css';\n// import About from './components/About';\nimport NavBar  from './components/NavBar';\nimport TextForm from './components/TextForm';\nimport React ,{useState} from 'react';\nimport Alert from './components/Alert';\nfunction App() {\n  const [mode, setMode] = useState('light'); // Wheether dark mode is enabled or not\n  const [alert, setAlert] = useState('');\n  const showAlert = (message , type)=>{\n      setAlert({\n        msg: message,\n        type: type\n      })\n      setTimeout(() => {\n        setAlert(null);\n      }, 3000);\n  }\n  const toggleMode = (mode) =>{\n    setMode(mode);\n    console.log(style.light.backgroundColor)\n    console.log(style[mode].backgroundColor)\n    document.body.style.backgroundColor = style[mode].backgroundColor;\n    showAlert(style[mode].alertmsg,\"success\")  \n\n  }\n  \n  const style = {\n    light:{\n      button:\"btn-light\",\n      textarea:\"txtareaLight\",\n      headingsContainer:\"headingsContainerWhite\",\n      navbar:\"navbar-light bg-light\",\n      backgroundColor:\"white\",\n      alertmsg:\"Light mode has been enabled\"\n    },\n    dark:{\n      button:\"btn-dark\",\n      textarea:\"txtareaDark\",\n      headingsContainer:\"headingsContainerDark\",\n      navbar:\"navbar-dark bg-dark\",\n      backgroundColor : \"#808080\",\n      alertmsg:\"Dark mode has been enabled\",\n    },\n    red:{\n      button:\"btn-danger\",\n      textarea:\"txtareaRed\",\n      headingsContainer:\"headingsContainerRed\",\n      navbar:\"navbar-dark bg-danger\",\n      backgroundColor:\"#FF4040\",\n      alertmsg:\"Red mode has been enabled\"\n    },\n    yellow:{\n      button:\"btn-warning\",\n      textarea:\"txtareaYellow\",\n      headingsContainer:\"headingContainerYellow\",\n      navbar:\"navbar-light bg-warning\",\n      backgroundColor:\"#FFDA8F\",\n      alertmsg:\"Yellow mode has been enabled\"\n    },\n    green:{\n      button:\"btn-success\",\n      textarea:\"txtareaGreen\",\n      headingsContainer:\"headingContainerGreen\",\n      navbar:\"navbar-dark bg-success\",\n      backgroundColor:\"#39ec73\",\n      alertmsg:\"Green mode has been enabled\"\n    },\n    blue:{\n      button:\"btn-primary\",\n      textarea:\"txtareaBlue\",\n      headingsContainer:\"headingContainerBlue\",\n      navbar:\"navbar-light bg-info\",\n      backgroundColor:\"#65cbf2\",\n      alertmsg:\"Blue mode has been enabled\"\n    }\n\n  }\n\n  return (\n    <>\n      <NavBar title = \"Textutils\" mode = {style[mode]} aboutText=\"About TextUtils\" toggleMode = {toggleMode}/>\n      <Alert alert = {alert}/>\n      <div className= \"container my-3\">\n      {/* <About/> */}\n      <TextForm heading = \"This is heading\" mode = {style[mode]} showAlert = {showAlert}/>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}